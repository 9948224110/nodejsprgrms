Differences between compiled and interpreted languages:--
Compiler:
  a compiler will translate the program directly into code that is specific to the target machine,
  which is also known as machine code â€“ basically code that is specific to a given processor and operating system. 
  Then the computer will run the machine code on its own.
  A compiled language:
  parse the program check for syntax errors, check for data types ,  
  verify the program semantically correct or not then translate the program in other language
  Advantages:
   The entire program is verified so there are no syntax or semantic errors;
   faster execution:The executable file is optimized by the compiler so it execute faster;


 Interpreter:
  The program stop execution on first error.
  Here source code is not directly run by the target machine. line by line compilation and error detecting happens here.
  What happens instead is that another program reads and then executes the original source code. 
  This other program is also known as the interpreter. 
 Advantages:
   You find errors before you finish the program.
   Program can be executed before is finished so you gat partial results early;
   You can see the results and you may decide to continue or not.
   You can create small parts of the project and combine them later into a larger project therefore efficient.
   ---------------------------------------------------------------------------------------------------------------------------------------
   
   MERN STACK:---
   MERN Stack = MongoDB + Express.js + React.js + Node.js,
   MERN is the short form of all technologies which plays different roles in different stages 
   while developing the applications.
   --------------------------------------------------------------------------------------------------------------------------------------
   Time and Space Complexities:
   we mostly consider time complexity and space complexity for analysing efficiency of an algorithm.
   Time complexity of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input.
   Similarly, Space complexity of an algorithm quantifies the amount of space or memory taken by an algorithm to run as a function of the length of the input.
   Time and space complexity depends on lots of things like hardware, operating system, processors, etc.
   Asymptotic analysis overcomes the problems of naive way of analyzing algorithms.we have 3 case:
   1) Worst Case(O Big O Notation)upper bound on running time of an algorithm.
   2) Average Case(theta notation)average bound on running time of an algorithm.
   3) Best Case(W omega Notation)lower bound on running time of an algorithm.
   
   ---------------------------------------------------------------------------------------------------------------------------------------
   DATA STRUCTURES:organising and accessing data in efficient manner.
   a data structure is a data organization, management and storage format that enables efficient access and modification. 
   More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.
   Data Structures are 2 types::--
   Linear data structures                      NonLinear
   (sequential access)                           (not sequential)
  1. Arrays                                       1.Trees(graph with  no loop)
  2. Linked List (nodepointer,data)              2.Graphs(collection of vertices and nodes)
  3. Stack(last in first out)
  4. Queue(first in first out)
   
